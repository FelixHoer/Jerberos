package kerberos.protocol.service;

import java.net.Socket;
import java.util.Date;

import kerberos.protocol.dto.Authenticator;
import kerberos.protocol.dto.Encrypted;
import kerberos.protocol.dto.ServiceRequest;
import kerberos.protocol.dto.ServiceResponse;
import kerberos.protocol.dto.Ticket;
import kerberos.stack.Stack;

public class ServiceProtocol{

    private final Stack stack;
    private final ServiceConfiguration config;

    private byte[] sessionKey;

    /**
     * Reads a request message, processes it and sends a response.
     * @param config the configuration information for the service
     * @param socket the connection to the client
     * @throws Exception if the protocol can't be executed correctly.
     */
    public ServiceProtocol(ServiceConfiguration config, Socket socket) throws Exception {
        this.config = config;
        stack = new Stack(socket);

        ServiceRequest request = (ServiceRequest) stack.read();
        ServiceResponse response = this.process(request);
        stack.write(response);

        // leave stack open for further communication
    }

    /**
     * Processes an incoming request and answers with an appropriate response.
     * 
     * The request contains two parts.
     * 
     * The first part is the Ticket generated by the Ticket-Grainting-Server,
     * which is encrypted with the Service-Key. This ticket contains the 
     * Session-Key used by the client for the second part.
     * 
     * The second part is an encrypted authenticator which contains the client's
     * name and the time the request was sent.
     * 
     * If decryption and validation of the authenticator succeeded the response
     * will be generated.
     * 
     * The response consists of the time in the authenticator of the client
     * incremented by one. The response is encrypted with the shared 
     * Session-Key.
     * 
     * @param request the request sent by the client
     * @return the response generated by the server
     * @throws Exception if decryption or validation failed
     */
    private ServiceResponse process(ServiceRequest request) throws Exception {
        byte[] key = config.getKey();
        Ticket ticket = request.getTicket().decrypt(key, Ticket.class);

        sessionKey = ticket.getSessionKey();

        Authenticator auth = request.getAuthenticator().decrypt(sessionKey, Authenticator.class);

        if(!auth.getClientName().equals(ticket.getClientName()))
            throw new Exception("client names do not match");

        Date now = new Date();
        Date authTime = auth.getTime();
        Date min = new Date(now.getTime() - 8 * 60 * 60 * 1000); // 8h ago
        Date max = new Date(now.getTime() + 60 * 1000); // 1min from now
        if(authTime.before(min) || authTime.after(max))
            throw new Exception("out of time frame: " + authTime);

        long time = authTime.getTime();
        Date timePlusOne = new Date(time + 1);

        ServiceResponse res = new ServiceResponse();
        res.setTimePlusOne(new Encrypted(timePlusOne, sessionKey));
        return res;
    }

    public byte[] getSessionKey() {
        return sessionKey;
    }

    public Stack getStack() {
        return stack;
    }

}
