package kerberos.protocol.client;

import java.util.Date;

import kerberos.protocol.dto.ASResponse;
import kerberos.protocol.dto.Authenticator;
import kerberos.protocol.dto.Encrypted;
import kerberos.protocol.dto.TGSRequest;
import kerberos.protocol.dto.TGSResponse;
import kerberos.serialize.SerializeUtilities;
import kerberos.stack.Stack;

public class TGSClientProtocol{

    private final Stack stack;
    private final ClientConfiguration config;
    private final ASClientProtocol asClient;

    private TGSResponse tgsResponse;
    private byte[] tgsSessionKey;

    /**
     * Sends a request to the Ticket Granting Server and blocks until it 
     * receives an an response. 
     * @param config the client configuration containing addresses and keys
     * @param asClient contains the response of the Authentication-Server
     * @throws Exception if the protocol could not be executed correctly
     */
    public TGSClientProtocol(ClientConfiguration config, 
            ASClientProtocol asClient) throws Exception {
        this.config = config;
        this.asClient = asClient;
        stack = new Stack(config.getTgsAddress());

        this.request();
        this.receive();

        stack.close();
    }

    /**
     * Sends a request that consists of two parts.
     * 
     * The first part is the Ticket generated by the Authentication-Server,
     * which is encrypted with the TGS-Key. This ticket contains the Session-Key 
     * used by the client for the second part.
     * 
     * The second part is an encrypted authenticator which contains the client's
     * name and the time the request was sent.
     * 
     * @throws Exception if the request could not be generated of sent
     */
    private void request() throws Exception{
        ASResponse asResponse = asClient.getResponse();

        tgsSessionKey = asResponse.getSessionKey().decrypt(config.getKey());
        System.out.println("Received Session Key: " + SerializeUtilities.toBase64(tgsSessionKey));

        System.out.println("-- Requesting TGS --");

        Authenticator tgsAuth = new Authenticator();
        tgsAuth.setClientName(config.getClientName());
        tgsAuth.setTime(new Date());
        
        TGSRequest tgsRequest = new TGSRequest();
        tgsRequest.setAuthenticator(new Encrypted(tgsAuth, tgsSessionKey));
        tgsRequest.setTicket(asResponse.getTicket());

        stack.write(tgsRequest);
    }

    /**
     * Reads and stores the response of the Ticket Granting Server.
     * @throws Exception if the response could not be red
     */
    private void receive() throws Exception{
        System.out.println("-- Received TGS --");

        Object object = stack.read();
        tgsResponse = (TGSResponse) object;
    }

    public TGSResponse getResponse() {
        return tgsResponse;
    }

    public byte[] getSessionKey() {
        return tgsSessionKey;
    }

}
