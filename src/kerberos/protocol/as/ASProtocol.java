package kerberos.protocol.as;

import java.util.Date;
import java.util.Map;

import kerberos.protocol.Processable;
import kerberos.protocol.SecurityUtilities;
import kerberos.protocol.dto.ASRequest;
import kerberos.protocol.dto.ASResponse;
import kerberos.protocol.dto.Encrypted;
import kerberos.protocol.dto.Ticket;
import kerberos.serialize.SerializeUtilities;

public class ASProtocol implements Processable<ASRequest, ASResponse>{

    private final ASConfiguration config;

    public ASProtocol(ASConfiguration config) {
        this.config = config;
    }

    /**
     * Processes an incoming request and answers with an appropriate response.
     * 
     * The request only contains which client wants to communicate with which 
     * service.
     * 
     * Using this information, the AS determines which long time shared secret
     * to use for encrypted communication with the client. 
     * 
     * To send a response the following two Parts have to be created.
     * The first part is a encrypted Session-Key for Client and TGS.
     * The second is a Ticket for the TGS, containing the Session-Key and some 
     * additional information. This Ticked is encrypted with the long time
     * shared secret key of the TGS.
     * 
     * @param request the request sent by the client
     * @return the response generated by the server
     * @throws Exception if decryption or validation failed
     */
    @Override
    public ASResponse process(ASRequest request) throws Exception {
        Map<String, byte[]> clientKeys = config.getClientKeys();
        byte[] tgsKey = config.getTgsKey();

        String clientName = request.getClientName();
        byte[] clientKey = clientKeys.get(clientName);
        if(clientKey == null)
            throw new Exception("no client registered with name " + clientName);

        byte[] sessionKey = SecurityUtilities.generateKey();
        System.out.println("Generated Session Key: " + SerializeUtilities.toBase64(sessionKey));

        Ticket ticket = new Ticket();
        ticket.setClientName(request.getClientName());
        ticket.setServiceName(request.getServiceName());
        ticket.setSessionKey(sessionKey);
        ticket.setStartTime(new Date());
        long endTime = new Date().getTime() + 8 * 60 * 60 * 1000; // 8h from now
        ticket.setEndTime(new Date(endTime));

        ASResponse res = new ASResponse();
        res.setSessionKey(new Encrypted(sessionKey, clientKey));
        res.setTicket(new Encrypted(ticket, tgsKey));
        return res;
    }

}
